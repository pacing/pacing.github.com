<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pacing's Blog]]></title>
  <link href="http://pacing.github.com/atom.xml" rel="self"/>
  <link href="http://pacing.github.com/"/>
  <updated>2012-10-15T19:07:07+08:00</updated>
  <id>http://pacing.github.com/</id>
  <author>
    <name><![CDATA[Pacing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails路由学习笔记]]></title>
    <link href="http://pacing.github.com/blog/2012/10/15/railslu-you-xue-xi-bi-ji/"/>
    <updated>2012-10-15T17:49:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/15/railslu-you-xue-xi-bi-ji</id>
    <content type="html"><![CDATA[<p>Rails中的路由系统有两个功能。</p>

<p>第一个功能：检查请求的URL和判断应该调用那个应用程序的动作来处理请求。</p>

<p>第二个功能：根据视图模板和控制器中URL生成语法生成URL。</p>

<!--more-->


<h1>以下是一些例子：</h1>

<p>1.典型的路由信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect 'myrecipes/:ingredient'
</span><span class='line'>               :controller => "recipes",
</span><span class='line'>               :action => "show"</span></code></pre></td></tr></table></div></figure>


<p> 在这个例子里，有几点需要指出：</p>

<ol>
<li><p>静态字符串： myrecipes （可以为任意的字符串，当然要避免冲突）</p></li>
<li><p>通配符：    :ingredient (比如:id/:name/&#8230;&#8230;)</p></li>
<li><p>控制器名称及动作名称</p></li>
</ol>


<p> 以http://localhost:3000/myrecipes/1这个URL为例</p>

<p> 根据ingedient路由规则，recipes控制器的show动作将被执行，并且会向动作传递params[:ingredient]=2参量值。当然，:ingredient也可以是:id,:name&#8230;&#8230;</p>

<p>2.默认的路由信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect ':controller/:action/:id'</span></code></pre></td></tr></table></div></figure>


<p> 这一条语句位于route.rb文件的最末尾，当其他的路由信息都没有被匹配到的时候，这条语句将会被执行。</p>

<p> 以下面这个URL请求为例：http://localhost:3000/auctions/show/1</p>

<p> :controller/:action/:id    对应了  auctions/show/1   ,一目了然，params[:id]被传入到auctions控制器的show动作中，并且执行了这个动作。</p>

<p> 这个URL是由类似这样一条语句生成的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= linke_to item.descrition ,:controller => "auctions" ,:action => "show",:id => item.id% %></span></code></pre></td></tr></table></div></figure>


<p>3.空的路由信息</p>

<p> 当静态字符串为空的时候，我们就得到了空的路由信息，但是，在最新的route.rb中，空的路由信息已经被注释掉了，取而代之的是，我们以类似于这个形式的语句定义空语句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.root :controller => "homepage"</span></code></pre></td></tr></table></div></figure>


<p>4.1示例的延伸。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect 'myrecipes/:user_id/:id'
</span><span class='line'>               :controller => "recipes",
</span><span class='line'>               :action => "show"</span></code></pre></td></tr></table></div></figure>


<p> 这条示例的含义大家自己琢磨</p>

<p>5.路由中的通配字段</p>

<p> 对于这样一条链接：/files/list/base/books/ficiton/dichens</p>

<p> 想要用/files/list动作访问所有的4个保留字段，但是有时或许是3个，或者更多更少。</p>

<p> 这个愿望可以通过通配字段来实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect 'fiels/list/*specs'
</span><span class='line'>       def list
</span><span class='line'>           specs = params[:specs]  #e.g["base","books","fiction","dichens"]   
</span><span class='line'>       end</span></code></pre></td></tr></table></div></figure>


<p> 可以看出来，params[:specs] 拥有一个URL区域数组。
 路由通配字段必须放在路由模式字符串的最后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect 'files/list/*specs/dickens'  #这样做将无法工作！！！</span></code></pre></td></tr></table></div></figure>


<p>6.具名路由</p>

<p> 具名路由简化了开发者的操作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.help  'help'
</span><span class='line'>                   :controller => 'main'
</span><span class='line'>                   :action => 'show'</span></code></pre></td></tr></table></div></figure>


<p> 根据上述路由信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= link_to 'Help!',help_path%></span></code></pre></td></tr></table></div></figure>


<p> 将生成这样的URL:    your-website/main/show</p>

<p>7.REST和RESTful</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.resources  :autions</span></code></pre></td></tr></table></div></figure>


<p> 小结：</p>

<p> 在整个Rails中，路由可能算是一个比较难的部分。本文罗列了我在Rails学习时候的一些总结，希望可以对像我这样的Rails新手提供一些帮助。
 最后一个示例中，REST是值得大书特书的部分，大家可以google跟多相关的资料，我就不作解释了。</p>

<p> 文章中措辞不当的部分，欢迎大家指出。</p>

<p> 相关资源：  《THE RAILS WAY》（中文译名：Rails 之道）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git之路（一）]]></title>
    <link href="http://pacing.github.com/blog/2012/10/14/gitzhi-lu-%28%5B%3F%5D-%29/"/>
    <updated>2012-10-14T21:09:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/14/gitzhi-lu-([?]-)</id>
    <content type="html"><![CDATA[<p>最近在学习Git，至于分布式版本控制系统Git的强大之处，我就不再赘述了，google之。
现在开始我们Git世界的旅行吧</p>

<p>1.安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git
</span><span class='line'>sudo apt-get install git-doc git-svn git-email git-gui gitk</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>2.Git初始化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git --version (查询git版本)
</span><span class='line'>git config --global user.name "pacing"
</span><span class='line'>git config --global user.email "email@x.com"</span></code></pre></td></tr></table></div></figure>


<p>3.开始第一次实践</p>

<blockquote></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir demo
</span><span class='line'>cd demo
</span><span class='line'>git init</span></code></pre></td></tr></table></div></figure>


<p>以上步骤在git 1.6.5以上的版本可以用命令行 git init demo 代替</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -aF</span></code></pre></td></tr></table></div></figure>


<p>这个命令行显示当前文件目录，其中有一个.git/隐藏目录,称为Git版本库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "Hello" > welcome.txt
</span><span class='line'>git add welcome.txt
</span><span class='line'>git commit -m "initialized"</span></code></pre></td></tr></table></div></figure>


<p>4.总结一下</p>

<p>步骤二，我们设置了该linux用户名下的Git用户名及邮箱地址</p>

<p>步骤三，我们建立了一个demo文件夹（称之为git工作区）并在文件夹内初始化了git版本库，之后新建了内容为Hello的welcomet.xt文本文件。接下来git add welcome.txt命令将工作区文件welcome.txt提交到了暂存区，git commit -m &#8220;initialized&#8221;命令将暂存区文件welcome.txt提交到版本库。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人生是一场带着枷锁的舞蹈]]></title>
    <link href="http://pacing.github.com/blog/2012/10/12/ren-sheng-shi-%5B%3F%5D-chang-dai-zhao-jia-suo-de-wu-dao/"/>
    <updated>2012-10-12T16:43:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/12/ren-sheng-shi-[?]-chang-dai-zhao-jia-suo-de-wu-dao</id>
    <content type="html"><![CDATA[<!--more -->


<p><video width='640' height='320' preload='none' controls poster=' http://s3.imathis.com/video/zero-to-fancy-buttons.png'><source src='http://s3.imathis.com/video/zero-to-fancy-buttons.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'/></video></p>

<h3>没有人可以逃脱枷锁</h3>

<h3>人只能选择枷锁的类型</h3>

<h3>选择你的枷锁，然后痛并快乐着</h3>

<h3>即使被锁着，也要在舞曲开始的时候让自己优雅，跳好人生这场舞</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[post title]]></title>
    <link href="http://pacing.github.com/blog/2012/10/12/post-title/"/>
    <updated>2012-10-12T15:20:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/12/post-title</id>
    <content type="html"><![CDATA[<!-- more -->


<h1>这是 H1</h1>

<div><script src='https://gist.github.com/3877996.js?file='></script>
<noscript><pre><code>public class C {
  int a = b + 3;
  int b = 5;
}</code></pre></noscript></div>


<h3>这是H3</h3>

<p><span class='pullquote-right' data-pullquote='surround it like this'>
Surround your paragraph with the pull quote tags. Then when you come to
the text you want to pull, surround it like this and that&#8217;s all there is to it.
</span></p>
]]></content>
  </entry>
  
</feed>
