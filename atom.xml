<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Pacing's Blog]]></title>
  <link href="http://pacing.github.com/atom.xml" rel="self"/>
  <link href="http://pacing.github.com/"/>
  <updated>2012-10-29T23:37:52+08:00</updated>
  <id>http://pacing.github.com/</id>
  <author>
    <name><![CDATA[Pacing]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[设计模式]]></title>
    <link href="http://pacing.github.com/blog/2012/10/26/she-ji-mo-shi/"/>
    <updated>2012-10-26T20:48:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/26/she-ji-mo-shi</id>
    <content type="html"><![CDATA[<p>最近这两天在看ruby设计模式这本书，这本书是我这样一个学生来说是一次饕餮盛宴。这本书被我反反复复地翻了好几遍，代码也都敲到了计算机里面，一个词，受益匪浅。</p>

<!--more-->


<p>设计模式有几个核心的原则：</p>

<p>1.把变和不变的事物分开。</p>

<p>2.针对接口编程而不对实现编程。</p>

<p>3.组合优于继承</p>

<p>4.委托、委托、委托。</p>

<p>以上是四人组的设计模式的不全面的总结。</p>

<p>另外，ruby设计模式的作者提出了一个观点：</p>

<p>你不会用到它。意思是，专注于你现在所要实现的功能上，不要想其他的，你现在设想好的功能，在将来不一定会用到。</p>

<p>这大概是在信息大量涌现，眼花缭乱的时代，我们每个人都应该具备的能力，而不仅仅在编程时候要记得。
专注眼前之事，做好正在做的事情，不要想太多，否则心慌。</p>

<p>另外，记录一下我学习中想到的一句话：</p>

<p>解耦，重用代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails路由学习笔记]]></title>
    <link href="http://pacing.github.com/blog/2012/10/20/rails/"/>
    <updated>2012-10-20T17:49:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/20/rails</id>
    <content type="html"><![CDATA[<p>Rails中的路由系统有两个功能。</p>

<p>第一个功能：检查请求的URL和判断应该调用那个应用程序的动作来处理请求。</p>

<p>第二个功能：根据视图模板和控制器中URL生成语法生成URL。</p>

<!--more-->


<h1>以下是一些例子：</h1>

<p>1.典型的路由信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect 'myrecipes/:ingredient'
</span><span class='line'>               :controller => "recipes",
</span><span class='line'>               :action => "show"</span></code></pre></td></tr></table></div></figure>


<p> 在这个例子里，有几点需要指出：</p>

<ol>
<li><p>静态字符串： myrecipes （可以为任意的字符串，当然要避免冲突）</p></li>
<li><p>通配符：    :ingredient (比如:id/:name/&#8230;&#8230;)</p></li>
<li><p>控制器名称及动作名称</p></li>
</ol>


<p> 以http://localhost:3000/myrecipes/1这个URL为例</p>

<p> 根据ingedient路由规则，recipes控制器的show动作将被执行，并且会向动作传递params[:ingredient]=2参量值。当然，:ingredient也可以是:id,:name&#8230;&#8230;</p>

<p>2.默认的路由信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect ':controller/:action/:id'</span></code></pre></td></tr></table></div></figure>


<p> 这一条语句位于route.rb文件的最末尾，当其他的路由信息都没有被匹配到的时候，这条语句将会被执行。</p>

<p> 以下面这个URL请求为例：http://localhost:3000/auctions/show/1</p>

<p> :controller/:action/:id    对应了  auctions/show/1   ,一目了然，params[:id]被传入到auctions控制器的show动作中，并且执行了这个动作。</p>

<p> 这个URL是由类似这样一条语句生成的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= linke_to item.descrition ,:controller => "auctions" ,:action => "show",:id => item.id% %></span></code></pre></td></tr></table></div></figure>


<p>3.空的路由信息</p>

<p> 当静态字符串为空的时候，我们就得到了空的路由信息，但是，在最新的route.rb中，空的路由信息已经被注释掉了，取而代之的是，我们以类似于这个形式的语句定义空语句：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.root :controller => "homepage"</span></code></pre></td></tr></table></div></figure>


<p>4.1示例的延伸。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect 'myrecipes/:user_id/:id'
</span><span class='line'>               :controller => "recipes",
</span><span class='line'>               :action => "show"</span></code></pre></td></tr></table></div></figure>


<p> 这条示例的含义大家自己琢磨</p>

<p>5.路由中的通配字段</p>

<p> 对于这样一条链接：/files/list/base/books/ficiton/dichens</p>

<p> 想要用/files/list动作访问所有的4个保留字段，但是有时或许是3个，或者更多更少。</p>

<p> 这个愿望可以通过通配字段来实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect 'fiels/list/*specs'
</span><span class='line'>       def list
</span><span class='line'>           specs = params[:specs]  #e.g["base","books","fiction","dichens"]   
</span><span class='line'>       end</span></code></pre></td></tr></table></div></figure>


<p> 可以看出来，params[:specs] 拥有一个URL区域数组。
 路由通配字段必须放在路由模式字符串的最后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.connect 'files/list/*specs/dickens'  #这样做将无法工作！！！</span></code></pre></td></tr></table></div></figure>


<p>6.具名路由</p>

<p> 具名路由简化了开发者的操作。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.help  'help'
</span><span class='line'>                   :controller => 'main'
</span><span class='line'>                   :action => 'show'</span></code></pre></td></tr></table></div></figure>


<p> 根据上述路由信息</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= link_to 'Help!',help_path%></span></code></pre></td></tr></table></div></figure>


<p> 将生成这样的URL:    your-website/main/show</p>

<p>7.REST和RESTful</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>map.resources  :autions</span></code></pre></td></tr></table></div></figure>


<p> 小结：</p>

<p> 在整个Rails中，路由可能算是一个比较难的部分。本文罗列了我在Rails学习时候的一些总结，希望可以对像我这样的Rails新手提供一些帮助。
 最后一个示例中，REST是值得大书特书的部分，大家可以google跟多相关的资料，我就不作解释了。</p>

<p> 文章中措辞不当的部分，欢迎大家指出。</p>

<p> 相关资源：  《THE RAILS WAY》（中文译名：Rails 之道）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git之路（总结篇）]]></title>
    <link href="http://pacing.github.com/blog/2012/10/17/gitzhi-lu-%28zong-jie-pian-%29/"/>
    <updated>2012-10-17T23:02:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/17/gitzhi-lu-(zong-jie-pian-)</id>
    <content type="html"><![CDATA[<p>所谓，工欲善其事，必先利其器。</p>

<!--more-->


<p>对于从事设计工作的人来说，没有版本控制利器，又怎么行呢？不管是cvs，svn还是git。我选择了Git，我不想使用石器时代的玩意，当然，个人有个人的爱好，不可强求。</p>

<p>到目前为止，我们了解到了Git的一些关键概念以及一些常用的命令，这些东西将会在实践中逐渐成为我们手上的利剑，供我们驱使。</p>

<p>我是从蒋鑫大神的大作<a href="http://www.amazon.cn/Git%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E8%92%8B%E9%91%AB/dp/B0058FLC40/ref=sr_1_1?ie=UTF8&amp;qid=1350487642&amp;sr=8-1">Git权威指南</a>中学习git版本控制艺术的，以上几篇是我自己的总结，帮助我消化git，也希望能对想要入门git的童鞋有所帮助。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git之路（四）]]></title>
    <link href="http://pacing.github.com/blog/2012/10/17/gitzhi-lu-%28si-%29/"/>
    <updated>2012-10-17T22:24:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/17/gitzhi-lu-(si-)</id>
    <content type="html"><![CDATA[<!--more-->


<p>这一篇介绍Git重置命令和Git检出命令。</p>

<p>Git重置命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reset --hard HEAD^</span></code></pre></td></tr></table></div></figure>


<p>用例中的命令可以将分支的master游标重置到当前提交的父提交上，也就是将版本库倒退到之前一个时间节点上，让项目重新从那个时间节点上开始开发。
Git 重置命令的挽救工作：</p>

<p>如果你执行了一次Git重置命令，但是发现这次重置反而造成了更大的损失，这是后你又想回到未来，这时候，就需要reglog来挽救</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git reflog show master | head -5
</span><span class='line'>git reset --hard master@{1}</span></code></pre></td></tr></table></div></figure>


<p>这样，我们的版本库又可以回到开始时候的节点了。</p>

<p>Git检出命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout something</span></code></pre></td></tr></table></div></figure>


<p>Git检出命令可以分离头指针，即HEAD。HEAD的指向为我们确定了下一次提交的父提交的位置，因此，当HEAD处于不同节点时，我们将产生不同的分支。在上一段代码中，something的终极指示是一个commit对象ID，而这个something可以是branch，可以是tag，或者其他。</p>

<p>挽救分离头指针</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch -v   #确认你处于目标分支
</span><span class='line'>git merge ID   #将ID对应提交合并到你的目标分支，这样会产生两个父提交</span></code></pre></td></tr></table></div></figure>


<p>后记：</p>

<p>这篇文章里我为大家建立了一个对git的检出命令和重置命令的初步认识，要完全学会使用这两个命令，需要在了解两个命令的深入用法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git之路（三）]]></title>
    <link href="http://pacing.github.com/blog/2012/10/16/gitzhi-lu-%28san-%29/"/>
    <updated>2012-10-16T23:18:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/16/gitzhi-lu-(san-)</id>
    <content type="html"><![CDATA[<p>这一篇对Git对象进行总结。</p>

<p>首先看一个例子。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># git log -1 --pretty=raw
</span><span class='line'>commit 7213e9b40359e477080ed8feeb1120041cbd5ee8
</span><span class='line'>tree de4ca4100e63695044400bf7e2b834d6b053a62f
</span><span class='line'>parent 60c5a8067cadc872391a9890f89827264ca39015
</span><span class='line'>author pacing &lt;wqy874654098@gmail.com> 1350305952 +0800
</span><span class='line'>committer pacing &lt;wqy874654098@gmail.com> 1350305952 +0800
</span><span class='line'>
</span><span class='line'>    modify bye</span></code></pre></td></tr></table></div></figure>


<p>可以看出来，在一次提交中，包含了三个SHA1哈希值来表示对象ID。</p>

<p>再来一段代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># git log -2 --pretty=raw
</span><span class='line'>commit 7213e9b40359e477080ed8feeb1120041cbd5ee8
</span><span class='line'>tree de4ca4100e63695044400bf7e2b834d6b053a62f
</span><span class='line'>parent 60c5a8067cadc872391a9890f89827264ca39015
</span><span class='line'>author pacing &lt;wqy874654098@gmail.com> 1350305952 +0800
</span><span class='line'>committer pacing &lt;wqy874654098@gmail.com> 1350305952 +0800
</span><span class='line'>
</span><span class='line'>    modify bye
</span><span class='line'>
</span><span class='line'>commit 60c5a8067cadc872391a9890f89827264ca39015
</span><span class='line'>tree c722a9a8a289e99fcf2be5f658a67c8d7d94e8f7
</span><span class='line'>author pacing &lt;wqy874654098@gmail.com> 1350305791 +0800
</span><span class='line'>committer pacing &lt;wqy874654098@gmail.com> 1350305791 +0800
</span><span class='line'>
</span><span class='line'>    first commit</span></code></pre></td></tr></table></div></figure>


<p>对比可以发现</p>

<pre><code>commit ID值    对应了本次提交的唯一标识

parent ID值    对应了本次提交的父提交（上一次提交的commit的ID值）
</code></pre>

<p>而  tree  ID值    对应了本次提交所对应的目录树</p>

<p>git cat-file 这个命令可以来研究git对象ID。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git cat-file -p ID值   #这个命令可以显示对象的内容
</span><span class='line'>git cat-file -t ID值   #这个命令可以显示对象的类型</span></code></pre></td></tr></table></div></figure>


<p>由上面的例子，我们可以猜想到git版本库的大致结构。</p>

<p>前一次提交的commit和后一次提交的parent的对象ID相同，所有相邻两次提交都是如此，那么就构成了一条历史追踪链，也使得版本管理成为可能。</p>

<p>而每一个commit对象ID都对应了一个tree对象ID，对象ID又对个了自己的内容ID值。</p>

<p>至此，我们在原理上相同了git版本库的工作流程，当然，实现很复杂。</p>

<p>我们来慢慢解读。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git之路（二）]]></title>
    <link href="http://pacing.github.com/blog/2012/10/15/gitzhi-lu-%28er-%29/"/>
    <updated>2012-10-15T21:46:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/15/gitzhi-lu-(er-)</id>
    <content type="html"><![CDATA[<p>上一篇，我们使用了git init，git add和git commit三个命令来创建一个git版本库。</p>

<!--more-->


<p>git init 初始化了一个版本库。</p>

<p>git add  将工作区（即工作目录）的内容添加到git缓存区。</p>

<p>git commit 将缓存区的内容添加到git版本库。</p>

<p>今天这篇文章着重关于git缓存区这个概念。</p>

<p>一个例子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># git init
</span><span class='line'># touch welcome.txt
</span><span class='line'># echo "Hello." >> welcome.txt
</span><span class='line'># git add welcome.txt
</span><span class='line'># git commit -m "first commit" 
</span><span class='line'>[master (root-commit) 4bab956] first commit
</span><span class='line'> 1 file changed, 1 insertion(+)
</span><span class='line'> create mode 100644 welcome.txt
</span><span class='line'>
</span><span class='line'>============================================
</span><span class='line'>
</span><span class='line'># echo "Nice to meet you." >> welcome.txt
</span><span class='line'># git diff
</span><span class='line'>diff --git a/welcome.txt b/welcome.txt
</span><span class='line'>index 18832d3..fd3c069 100644
</span><span class='line'>--- a/welcome.txt
</span><span class='line'>+++ b/welcome.txt
</span><span class='line'>@@ -1 +1,2 @@
</span><span class='line'> Hello.
</span><span class='line'>+Nice to meet you.
</span><span class='line'>
</span><span class='line'>============================================
</span><span class='line'>
</span><span class='line'># git commit -m "second commit"
</span><span class='line'># On branch master
</span><span class='line'># Changes not staged for commit:
</span><span class='line'>#   (use "git add &lt;file>..." to update what will be committed)
</span><span class='line'>#   (use "git checkout -- &lt;file>..." to discard changes in working directory)
</span><span class='line'>#
</span><span class='line'>#       modified:   welcome.txt
</span><span class='line'>#
</span><span class='line'>no changes added to commit (use "git add" and/or "git commit -a")</span></code></pre></td></tr></table></div></figure>


<p>可以看出来，第二次提交并没有成功，为什么呢？对比第一次我们可以发现，少了一个git add 命令。接下来再试一次</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># git add welcome.txt
</span><span class='line'># git commit -m "second commit"
</span><span class='line'>[master 9226a29] second commit
</span><span class='line'> 1 file changed, 1 insertion(+)
</span><span class='line'># git log --pretty=oneline
</span><span class='line'>9226a29471e7c7913a478996ab29a77f43584d7c second commit
</span><span class='line'>4bab95647dae270bcb824dc3b8b5b019d623f35a first commit</span></code></pre></td></tr></table></div></figure>


<p>通过日志我们可以发现，提交成功了。</p>

<p>结合上面的例子，我们可以建立一个很深刻的印象，一个git版本库，对应了一个工作区和>暂存区以及HEAD三个“空间”。</p>

<p>三个“空间”文件内容的对比：git diff 魔法</p>

<p>工作区和暂存区的对比： git diff</p>

<p>暂存区和HEAD比较：git diff &#8211;cached</p>

<p>工作区和HEAD的比较： git diff HEAD</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git之路（一）]]></title>
    <link href="http://pacing.github.com/blog/2012/10/14/gitzhi-lu-%28%5B%3F%5D-%29/"/>
    <updated>2012-10-14T21:09:00+08:00</updated>
    <id>http://pacing.github.com/blog/2012/10/14/gitzhi-lu-([?]-)</id>
    <content type="html"><![CDATA[<p>最近在学习Git，至于分布式版本控制系统Git的强大之处，我就不再赘述了，google之。
现在开始我们Git世界的旅行吧</p>

<p>1.安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install git
</span><span class='line'>sudo apt-get install git-doc git-svn git-email git-gui gitk</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>2.Git初始化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git --version (查询git版本)
</span><span class='line'>git config --global user.name "pacing"
</span><span class='line'>git config --global user.email "email@x.com"</span></code></pre></td></tr></table></div></figure>


<p>3.开始第一次实践</p>

<blockquote></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir demo
</span><span class='line'>cd demo
</span><span class='line'>git init</span></code></pre></td></tr></table></div></figure>


<p>以上步骤在git 1.6.5以上的版本可以用命令行 git init demo 代替</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls -aF</span></code></pre></td></tr></table></div></figure>


<p>这个命令行显示当前文件目录，其中有一个.git/隐藏目录,称为Git版本库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "Hello" > welcome.txt
</span><span class='line'>git add welcome.txt
</span><span class='line'>git commit -m "initialized"</span></code></pre></td></tr></table></div></figure>


<p>4.总结一下</p>

<p>步骤二，我们设置了该linux用户名下的Git用户名及邮箱地址</p>

<p>步骤三，我们建立了一个demo文件夹（称之为git工作区）并在文件夹内初始化了git版本库，之后新建了内容为Hello的welcomet.xt文本文件。接下来git add welcome.txt命令将工作区文件welcome.txt提交到了暂存区，git commit -m &#8220;initialized&#8221;命令将暂存区文件welcome.txt提交到版本库。</p>
]]></content>
  </entry>
  
</feed>
